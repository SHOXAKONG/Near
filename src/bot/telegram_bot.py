import telebot
import requests
from decouple import config
import json
import os

BOT_TOKEN = config('BOT_TOKEN')
BASE_URL = config('BASE_URL')

LANGUAGE_FILE = 'user_languages.json'

bot = telebot.TeleBot(BOT_TOKEN)

def save_languages(data):
    with open(LANGUAGE_FILE, 'w') as f:
        json.dump(data, f)


def load_languages():
    if not os.path.exists(LANGUAGE_FILE):
        return {}
    try:
        with open(LANGUAGE_FILE, 'r') as f:
            data = json.load(f)
            return {int(k): v for k, v in data.items()}
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

user_conversation_data = {}
user_language = load_languages()
logged_in_users = {}


def show_main_menu(chat_id, lang):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    if chat_id in logged_in_users:
        if lang == 'uz':
            markup.add('üîç Joy qidirish', '‚¨ÖÔ∏è Chiqish', "üåê Tilni o'zgartirish")
        else:
            markup.add('üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞', '‚¨ÖÔ∏è –í—ã—Ö–æ–¥', "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
        prompt = "Menyu" if lang == 'uz' else "–ú–µ–Ω—é"
    else:
        if lang == 'uz':
            markup.add('üìù Ro‚Äòyxatdan o‚Äòtish', '‚úÖ Kirish', 'üîë Parolni unutdingizmi?', "üåê Tilni o'zgartirish")
        else:
            markup.add('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '‚úÖ –í—Ö–æ–¥', 'üîë –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?', "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
        prompt = "Nimani xohlaysiz?" if lang == 'uz' else "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    bot.send_message(chat_id, prompt, reply_markup=markup)

@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    if chat_id in user_language:
        lang = user_language[chat_id]
        show_main_menu(chat_id, lang)
    else:
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('üá∫üáø O‚Äòzbek', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π')
        bot.send_message(chat_id, "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text in ['üá∫üáø O‚Äòzbek', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'])
def select_language(message):
    chat_id = message.chat.id
    lang = 'uz' if 'O‚Äòzbek' in message.text else 'ru'
    user_language[chat_id] = lang
    save_languages(user_language)
    bot.send_message(chat_id, "‚úÖ Til tanlandi!" if lang == 'uz' else "‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω!")
    show_main_menu(chat_id, lang)


@bot.message_handler(func=lambda msg: msg.text in [
    'üìù Ro‚Äòyxatdan o‚Äòtish', 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '‚úÖ Kirish', '‚úÖ –í—Ö–æ–¥',
    'üîë Parolni unutdingizmi?', 'üîë –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?', '‚¨ÖÔ∏è Chiqish', '‚¨ÖÔ∏è –í—ã—Ö–æ–¥',
    'üîç Joy qidirish', 'üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞', "üåê Tilni o'zgartirish", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
])
def handle_main_menu_actions(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id] = {}
    action = message.text

    if 'Ro‚Äòyxatdan' in action or '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in action:
        prompt = "Ismingizni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        msg = bot.send_message(chat_id, prompt)
        bot.register_next_step_handler(msg, process_first_name_step)
    elif 'Kirish' in action or '–í—Ö–æ–¥' in action:
        prompt = "Email manzilingizni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
        msg = bot.send_message(chat_id, prompt)
        bot.register_next_step_handler(msg, process_login_email_step)
    elif 'Parolni unutdingizmi?' in action or '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' in action:
        prompt = "Parolni tiklash uchun emailingizni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:"
        msg = bot.send_message(chat_id, prompt)
        bot.register_next_step_handler(msg, process_forgot_password_email_step)
    elif 'Chiqish' in action or '–í—ã—Ö–æ–¥' in action:
        if chat_id in logged_in_users:
            del logged_in_users[chat_id]
        success_message = "Siz tizimdan chiqdingiz." if lang == 'uz' else "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        bot.send_message(chat_id, f"‚úÖ {success_message}")
        show_main_menu(chat_id, lang)
    elif "Tilni o'zgartirish" in action or "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" in action:
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('üá∫üáø O‚Äòzbek', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π')
        bot.send_message(chat_id, "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)
    elif 'Joy qidirish' in action or '–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞' in action:
        if chat_id not in logged_in_users:
            bot.send_message(chat_id,
                             "Bu funksiyadan foydalanish uchun tizimga kiring." if lang == 'uz' else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        start_category_search(message)


def start_category_search(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    try:
        access_token = logged_in_users[chat_id].get('access')
        headers = {'Authorization': f'Bearer {access_token}'}
        url = f"{BASE_URL}/{lang}/api/category/"
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            categories = response.json()
            markup = telebot.types.InlineKeyboardMarkup()
            buttons = [telebot.types.InlineKeyboardButton(cat['name'], callback_data=f"cat_{cat['id']}") for cat in
                       categories]
            markup.add(*buttons)
            markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è Bosh menyu" if lang == 'uz' else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                                          callback_data="back_to_main"))
            bot.send_message(chat_id, "Kategoriyani tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                             reply_markup=markup)
        else:
            bot.send_message(chat_id,
                             "Kategoriyalarni yuklashda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    except Exception as e:
        print(e)
        bot.send_message(chat_id, "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    lang = user_language.get(chat_id, 'uz')
    data = call.data

    if data.startswith("place_"):
        index = int(data.split('_')[1])
        show_paginated_place(chat_id, index, call.message.message_id)

    elif data == "back_to_main_from_place":
        bot.delete_message(chat_id, call.message.message_id)
        if chat_id in user_conversation_data:
            if 'places' in user_conversation_data.get(chat_id, {}):
                del user_conversation_data[chat_id]['places']
            if 'message_id' in user_conversation_data.get(chat_id, {}):
                del user_conversation_data[chat_id]['message_id']
        show_main_menu(chat_id, lang)

    elif data == "back_to_main":
        bot.delete_message(chat_id, call.message.message_id)
        show_main_menu(chat_id, lang)
    elif data == "back_to_cat_list":
        bot.delete_message(chat_id, call.message.message_id)
        start_category_search(call.message)
    elif data.startswith("cat_"):
        category_id = data.split('_')[1]
        user_conversation_data[chat_id] = {'category_id': category_id}
        try:
            access_token = logged_in_users[chat_id].get('access')
            headers = {'Authorization': f'Bearer {access_token}'}
            url = f"{BASE_URL}/{lang}/api/subcategory/?category={category_id}"
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                subcategories = response.json()
                markup = telebot.types.InlineKeyboardMarkup()
                buttons = [telebot.types.InlineKeyboardButton(scat['name'], callback_data=f"subcat_{scat['id']}") for
                           scat in subcategories]
                markup.add(*buttons)
                markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è Orqaga" if lang == 'uz' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                                              callback_data="back_to_cat_list"))
                bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                                      text="Bo'limni tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                      reply_markup=markup)
            else:
                bot.answer_callback_query(call.id,
                                          "Bo'limlarni yuklashda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        except Exception as e:
            print(e)
            bot.answer_callback_query(call.id, "Xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞.")
    elif data.startswith("subcat_"):
        subcategory_id = data.split('_')[1]
        user_conversation_data[chat_id]['subcategory_id'] = subcategory_id
        bot.delete_message(chat_id, call.message.message_id)
        prompt = "Joylashuvingizni yuboring." if lang == 'uz' else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        location_button_text = "üìç Joylashuvni yuborish" if lang == 'uz' else "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"
        cancel_button_text = "‚ùå Bekor qilish" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–∞"
        markup.add(telebot.types.KeyboardButton(text=location_button_text, request_location=True),
                   telebot.types.KeyboardButton(text=cancel_button_text))
        msg = bot.send_message(chat_id, prompt, reply_markup=markup)
        bot.register_next_step_handler(msg, process_final_search_step)


@bot.message_handler(content_types=['location'])
def handle_location_for_search(message):
    process_final_search_step(message)


def process_final_search_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')

    if hasattr(message, 'text') and message.text in ["‚ùå Bekor qilish", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        show_main_menu(chat_id, lang)
        return
    if not hasattr(message, 'location') or not message.location:
        prompt = "Iltimos, joylashuvingizni tugma orqali yuboring." if lang == 'uz' else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏."
        msg = bot.send_message(chat_id, prompt)
        bot.register_next_step_handler(msg, process_final_search_step)
        return

    try:
        lat = message.location.latitude
        lon = message.location.longitude
        category_id = user_conversation_data[chat_id].get('category_id')
        subcategory_id = user_conversation_data[chat_id].get('subcategory_id')
        access_token = logged_in_users[chat_id].get('access')
        headers = {'Authorization': f'Bearer {access_token}'}
        prefix = f"{BASE_URL}/{lang}/api"
        url = f"{prefix}/place/"
        params = {'latitude': lat, 'longitude': lon, 'category': category_id, 'subcategory': subcategory_id}

        response = requests.get(url, headers=headers, params=params)

        searching_message = "Qidirilmoqda..." if lang == 'uz' else "–ò–¥—ë—Ç –ø–æ–∏—Å–∫..."
        bot.send_message(chat_id, searching_message, reply_markup=telebot.types.ReplyKeyboardRemove())

        if response.status_code == 200:
            response_data = response.json()
            places = response_data.get('results', [])
            if not places:
                bot.send_message(chat_id, "Hech narsa topilmadi." if lang == 'uz' else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                show_main_menu(chat_id, lang)
            else:
                results_header = "Qidiruv natijalari:" if lang == 'uz' else "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"
                bot.send_message(chat_id, results_header)
                user_conversation_data[chat_id]['places'] = places
                show_paginated_place(chat_id, 0)
        else:
            bot.send_message(chat_id,
                             "Qidirishda xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
            show_main_menu(chat_id, lang)

    except Exception as e:
        error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        bot.send_message(chat_id, f"‚ùå {error_text}")
        print(f"An error occurred in final search: {e}")
        show_main_menu(chat_id, lang)


def show_paginated_place(chat_id, index, message_id=None):
    lang = user_language.get(chat_id, 'uz')
    places = user_conversation_data.get(chat_id, {}).get('places', [])
    if not places or index < 0 or index >= len(places):
        return

    place = places[index]
    name = place.get('name', 'Nomsiz')
    description = place.get('description', '')
    distance = place.get('distance')
    image_url = place.get('image')
    place_location = place.get('location', {})
    place_lat = place_location.get('latitude')
    place_lon = place_location.get('longitude')

    caption = f"<b>{name}</b>\n\n"
    if description:
        caption += f"{description}\n\n"
    if distance:
        caption += f"Masofa: {distance:.2f} km\n" if lang == 'uz' else f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n"
    if place_lat and place_lon:
        map_link = f"https://maps.google.com/?q={place_lat},{place_lon}"
        link_text = "Xaritada ko'rish" if lang == 'uz' else "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ"
        caption += f'<a href="{map_link}">{link_text}</a>'

    markup = telebot.types.InlineKeyboardMarkup()
    row = []
    if index > 0:
        row.append(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è Oldingisi" if lang == 'uz' else "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                                                      callback_data=f"place_{index - 1}"))

    row.append(telebot.types.InlineKeyboardButton(f"{index + 1}/{len(places)}", callback_data="no_action"))

    if index < len(places) - 1:
        row.append(telebot.types.InlineKeyboardButton("Keyingisi ‚û°Ô∏è" if lang == 'uz' else "–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è",
                                                      callback_data=f"place_{index + 1}"))

    markup.row(*row)
    markup.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è Bosh menyu" if lang == 'uz' else "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                                  callback_data="back_to_main_from_place"))

    try:
        if message_id:
            if image_url:
                media = telebot.types.InputMediaPhoto(media=image_url, caption=caption, parse_mode='HTML')
                bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=media, reply_markup=markup)
            else:  # If there is no image, edit the text and markup
                bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=caption, reply_markup=markup,
                                         parse_mode='HTML')

        else:
            if image_url:
                sent_message = bot.send_photo(chat_id, photo=image_url, caption=caption, parse_mode='HTML',
                                              reply_markup=markup)
            else:
                sent_message = bot.send_message(chat_id, caption, parse_mode='HTML', reply_markup=markup,
                                                disable_web_page_preview=True)
            user_conversation_data[chat_id]['message_id'] = sent_message.message_id
    except Exception as e:
        print(f"Error showing paginated place: {e}")
        if message_id:
            bot.delete_message(chat_id, message_id)
        if image_url:
            sent_message = bot.send_photo(chat_id, photo=image_url, caption=caption, parse_mode='HTML',
                                          reply_markup=markup)
        else:
            sent_message = bot.send_message(chat_id, caption, parse_mode='HTML', reply_markup=markup,
                                            disable_web_page_preview=True)
        user_conversation_data[chat_id]['message_id'] = sent_message.message_id


def process_first_name_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['first_name'] = message.text
    prompt = "Familyangizni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
    msg = bot.send_message(chat_id, prompt)
    bot.register_next_step_handler(msg, process_last_name_step)


def process_last_name_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['last_name'] = message.text
    prompt = "Email manzilingizni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    msg = bot.send_message(chat_id, prompt)
    bot.register_next_step_handler(msg, process_email_step)


def process_email_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['email'] = message.text
    prompt = "Parol yarating:" if lang == 'uz' else "–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:"
    msg = bot.send_message(chat_id, prompt)
    bot.register_next_step_handler(msg, process_password_step)


def process_password_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['password'] = message.text
    prompt = "Parolni tasdiqlang:" if lang == 'uz' else "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
    msg = bot.send_message(chat_id, prompt)
    bot.register_next_step_handler(msg, process_password_confirm_step)


def process_password_confirm_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['password_confirm'] = message.text
    try:
        prefix = f"{BASE_URL}/{lang}/api/auth"
        url = f"{prefix}/register/"
        data = user_conversation_data[chat_id]
        processing_message = "Ma'lumotlar yuborilmoqda..." if lang == 'uz' else "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ..."
        bot.send_message(chat_id, processing_message)
        response = requests.post(url, json=data)
        response_data = response.json()
        if response.status_code == 201:
            success_message = response_data.get('message', "Muvaffaqiyatli ro'yxatdan o'tdingiz!")
            bot.send_message(chat_id, f"‚úÖ {success_message}")
            prompt = "Hisobingizni faollashtirish uchun emailingizga yuborilgan kodni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ø–∏—Å—å–º–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:"
            msg = bot.send_message(chat_id, prompt)
            bot.register_next_step_handler(msg, process_confirmation_code_step)
        else:
            error_message = response_data.get('email', [response_data.get('detail', "Ro'yxatdan o'tishda xatolik.")])[0]
            bot.send_message(chat_id, f"‚ùå {error_message}")
    except Exception as e:
        error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        bot.send_message(chat_id, f"‚ùå {error_text}")
    finally:
        if chat_id in user_conversation_data:
            del user_conversation_data[chat_id]


def process_confirmation_code_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    confirmation_code = message.text
    try:
        prefix = f"{BASE_URL}/{lang}/api/auth"
        url = f"{prefix}/confirm/"
        data = {"code": confirmation_code}
        response = requests.post(url, json=data)
        response_data = response.json()
        if response.status_code == 200:
            success_message = response_data.get('message', "Hisobingiz faollashtirildi!")
            bot.send_message(chat_id, f"‚úÖ {success_message}")
            prompt = "Iltimos, tizimga kiring." if lang == 'uz' else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É."
            bot.send_message(chat_id, prompt)
            show_main_menu(chat_id, lang)
        else:
            error_message = response_data.get('error', "Kod xato.")
            bot.send_message(chat_id, f"‚ùå {error_message}")
    except Exception as e:
        error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        bot.send_message(chat_id, f"‚ùå {error_text}")


def process_login_email_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id] = {'email': message.text}
    prompt = "Parolni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
    msg = bot.send_message(chat_id, prompt)
    bot.register_next_step_handler(msg, process_login_password_step)


def process_login_password_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['password'] = message.text
    try:
        prefix = f"{BASE_URL}/{lang}/api/auth"
        url = f"{prefix}/login/"
        data = user_conversation_data[chat_id]
        response = requests.post(url, json=data)
        response_data = response.json()
        if response.status_code == 200:
            logged_in_users[chat_id] = {'access': response_data.get('access'), 'refresh': response_data.get('refresh')}
            bot.send_message(chat_id, "‚úÖ Xush kelibsiz!" if lang == 'uz' else "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            show_main_menu(chat_id, lang)
        else:
            bot.send_message(chat_id, "‚ùå Email yoki parol xato." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
            show_main_menu(chat_id, lang)
    except Exception as e:
        error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        bot.send_message(chat_id, f"‚ùå {error_text}")
    finally:
        if chat_id in user_conversation_data:
            del user_conversation_data[chat_id]


def process_forgot_password_email_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    email = message.text
    user_conversation_data[chat_id] = {'email': email}
    try:
        prefix = f"{BASE_URL}/{lang}/api/auth"
        url = f"{prefix}/forgot_password/"
        response = requests.post(url, json={'email': email})
        if response.status_code == 200:
            bot.send_message(chat_id, response.json().get('message'))
            prompt = "Emailingizga yuborilgan kodni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ø–∏—Å—å–º–∞:"
            msg = bot.send_message(chat_id, prompt)
            bot.register_next_step_handler(msg, process_restore_code_step)
        else:
            bot.send_message(chat_id, "‚ùå Email topilmadi." if lang == 'uz' else "‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        bot.send_message(chat_id, f"‚ùå {error_text}")


def process_restore_code_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['code'] = message.text
    prompt = "Yangi parol yarating:" if lang == 'uz' else "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"
    msg = bot.send_message(chat_id, prompt)
    bot.register_next_step_handler(msg, process_restore_password_step)


def process_restore_password_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['password'] = message.text
    prompt = "Yangi parolni tasdiqlang:" if lang == 'uz' else "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"
    msg = bot.send_message(chat_id, prompt)
    bot.register_next_step_handler(msg, process_restore_password_confirm_step)


def process_restore_password_confirm_step(message):
    chat_id = message.chat.id
    lang = user_language.get(chat_id, 'uz')
    user_conversation_data[chat_id]['password_confirm'] = message.text
    try:
        prefix = f"{BASE_URL}/{lang}/api/auth"
        url = f"{prefix}/restore_password/"
        data = user_conversation_data[chat_id]
        response = requests.post(url, json=data)
        if response.status_code == 200:
            bot.send_message(chat_id, "‚úÖ Parolingiz muvaffaqiyatli o'zgartirildi. Endi tizimga kirishingiz mumkin.")
            show_main_menu(chat_id, lang)
        else:
            bot.send_message(chat_id, f"‚ùå {response.json().get('error', 'Xatolik')}")
    except Exception as e:
        error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        bot.send_message(chat_id, f"‚ùå {error_text}")
    finally:
        if chat_id in user_conversation_data:
            del user_conversation_data[chat_id]
