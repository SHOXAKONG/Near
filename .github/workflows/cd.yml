name: CD (Continuous Deployment)

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/near
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image (web+celery)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Copy files to server (scp)
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: '22'
          source: |
            docker-stack.yml
          target: /home/${{ secrets.SERVER_USER }}/near

      - name: Deploy on server (ssh)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: '22'
          script: |
            set -e
            cd /home/${{ secrets.SERVER_USER }}/near

            # write .env securely from secret
            cat > .env << 'EOF'
            ${{ secrets.ENV_FILE }}
            EOF

            # login so the server can pull from GHCR
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # export tag for envsubst
            export IMAGE_TAG=${{ env.IMAGE_TAG }}

            # remove old stack (ignore if not exists)
            docker stack rm near || true
            # wait a moment so old services clear
            sleep 10

            # inject IMAGE_TAG into the stack file and deploy
            envsubst < docker-stack.yml | docker stack deploy --with-registry-auth -c - near
